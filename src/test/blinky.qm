<?xml version="1.0" encoding="UTF-8"?>
<model version="3.3.0">
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpcpp::QMActive">
   <attribute name="timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="Blinky" type="" visibility="0x00" properties="0x02">
    <code>: QMActive(Q_STATE_CAST(&amp;Blinky::initial)),
  m_timeEvt(TIMEOUT_SIG)</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>me-&gt;m_timeEvt.postEvery(me, BSP_TICKS_PER_SEC/2);</action>
     <initial_glyph conn="26,2,5,0,8,5">
      <action box="8,-1,51,6"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP_ledOff();</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="56,13,1,1,13,19,-13">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="22,7,34,13">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP_ledOn();</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="22,32,3,3,-12,-20,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="22,24,34,14">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
 </package>
 <directory name="generated">
  <directory name="blinky">
   <file name="blinky.ino">
    <text>#include &quot;qp_port.h&quot;
#include &quot;Arduino.h&quot;  // always include in your sketch

Q_DEFINE_THIS_FILE

using namespace QP;

#define BSP_TICKS_PER_SEC 100

enum BlinkySignals { // signals for the Blinky application
    TIMEOUT_SIG = Q_USER_SIG
};

//............................................................................
void BSP_init(void) {
    DDRB  = 0xFF; // All PORTB pins are outputs (user LED)
    PORTB = 0x00; // drive all pins low
}
//............................................................................
void BSP_ledOff(void) {
    PORTB &amp;= ~(1 &lt;&lt; 5);
}
//............................................................................
void BSP_ledOn(void) {
    PORTB |= (1 &lt;&lt; 5);
}
//............................................................................
ISR(TIMER2_COMPA_vect) {
    QF::TICK((void *)0); // process all armed time events
}
//............................................................................
void QF::onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking
    TCCR2A = (1 &lt;&lt; WGM21) | (0 &lt;&lt; WGM20);
    TCCR2B = (1 &lt;&lt; CS22 ) | (1 &lt;&lt; CS21) | (1 &lt;&lt; CS20); // 1/2^10
    ASSR  &amp;= ~(1 &lt;&lt; AS2);
    TIMSK2 = (1 &lt;&lt; OCIE2A); // Enable TIMER2 compare Interrupt
    TCNT2  = 0;
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024) - 1;
}
//............................................................................
void QF::onCleanup(void) {
}
//............................................................................
void QF::onIdle() {
    QF_INT_ENABLE(); // re-enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    QF_INT_DISABLE(); // disable all interrupts
    BSP_ledOn(); // User LED permanently ON
    asm volatile (&quot;jmp 0x0000&quot;); // perform a software reset of the Arduino
}

//============================================================================
// generate code for the Blinky application...
$declare(AOs::Blinky)
$define(AOs::Blinky)

//............................................................................
static Blinky l_blinky;                           // instantiate the Blinky AO
QActive *AO_Blinky = &amp;l_blinky;     // initialize the global pointer to Blinky

//............................................................................
void setup() {
    BSP_init(); // initialize the BSP
    QF::init(); // initialize the framework and the underlying RT kernel

    static QEvt const *blinky_queueSto[10]; // alocate event queue buffer
    AO_Blinky-&gt;start(1, blinky_queueSto, Q_DIM(blinky_queueSto),
                     (void *)0, 0U);        // start the Blinky active object
}

//////////////////////////////////////////////////////////////////////////////
// NOTE1: Do not define the loop() function, because this function is
// already defined in the QP port to Arduino</text>
   </file>
  </directory>
 </directory>
</model>
